{"ast":null,"code":"/* global window, define, module */\n(function (global, factory) {\n  var Gauge = factory(global);\n\n  if (typeof define === \"function\" && define.amd) {\n    // AMD support\n    define(function () {\n      return Gauge;\n    });\n  } else if (typeof module === \"object\" && module.exports) {\n    // CommonJS support\n    module.exports = Gauge;\n  } else {\n    // We are probably running in the browser\n    global.Gauge = Gauge;\n  }\n})(typeof window === \"undefined\" ? this : window, function (global, undefined) {\n  var document = global.document,\n      slice = Array.prototype.slice,\n      requestAnimationFrame = global.requestAnimationFrame || global.mozRequestAnimationFrame || global.webkitRequestAnimationFrame || global.msRequestAnimationFrame || function (cb) {\n    return setTimeout(cb, 1000 / 60);\n  }; // EXPERIMENTAL!!\n\n  /**\n   * Simplistic animation function for animating the gauge. That's all!\n   * Options are:\n   * {\n   *  duration: 1,    // In seconds\n   *  start: 0,       // The start value\n   *  end: 100,       // The end value\n   *  step: function, // REQUIRED! The step function that will be passed the value and does something\n   *  easing: function // The easing function. Default is easeInOutCubic\n   * }\n   */\n\n\n  function Animation(options) {\n    var duration = options.duration,\n        currentIteration = 1,\n        iterations = 60 * duration,\n        start = options.start || 0,\n        end = options.end,\n        change = end - start,\n        step = options.step,\n        easing = options.easing || function easeInOutCubic(pos) {\n      // https://github.com/danro/easing-js/blob/master/easing.js\n      if ((pos /= 0.5) < 1) return 0.5 * Math.pow(pos, 3);\n      return 0.5 * (Math.pow(pos - 2, 3) + 2);\n    };\n\n    function animate() {\n      var progress = currentIteration / iterations,\n          value = change * easing(progress) + start; // console.log(progress + \", \" + value);\n\n      step(value, currentIteration);\n      currentIteration += 1;\n\n      if (progress < 1) {\n        requestAnimationFrame(animate);\n      }\n    } // start!\n\n\n    requestAnimationFrame(animate);\n  }\n\n  var Gauge = function () {\n    var SVG_NS = \"http://www.w3.org/2000/svg\";\n    var GaugeDefaults = {\n      centerX: 50,\n      centerY: 50\n    };\n    var defaultOptions = {\n      dialRadius: 40,\n      dialStartAngle: 135,\n      dialEndAngle: 45,\n      value: 0,\n      max: 100,\n      min: 0,\n      valueDialClass: \"value\",\n      valueClass: \"value-text\",\n      dialClass: \"dial\",\n      gaugeClass: \"gauge\",\n      showValue: true,\n      gaugeColor: null,\n      label: function (val) {\n        return Math.round(val);\n      }\n    };\n\n    function\n      /* source, ...targets*/\n    shallowCopy() {\n      var target = arguments[0],\n          sources = slice.call(arguments, 1);\n      sources.forEach(function (s) {\n        for (var k in s) {\n          if (s.hasOwnProperty(k)) {\n            target[k] = s[k];\n          }\n        }\n      });\n      return target;\n    }\n    /**\n     * A utility function to create SVG dom tree\n     * @param {String} name The SVG element name\n     * @param {Object} attrs The attributes as they appear in DOM e.g. stroke-width and not strokeWidth\n     * @param {Array} children An array of children (can be created by this same function)\n     * @return The SVG element\n     */\n\n\n    function svg(name, attrs, children) {\n      var elem = document.createElementNS(SVG_NS, name);\n\n      for (var attrName in attrs) {\n        elem.setAttribute(attrName, attrs[attrName]);\n      }\n\n      if (children) {\n        children.forEach(function (c) {\n          elem.appendChild(c);\n        });\n      }\n\n      return elem;\n    }\n    /**\n     * Translates percentage value to angle. e.g. If gauge span angle is 180deg, then 50%\n     * will be 90deg\n     */\n\n\n    function getAngle(percentage, gaugeSpanAngle) {\n      return percentage * gaugeSpanAngle / 100;\n    }\n\n    function normalize(value, min, limit) {\n      var val = Number(value);\n      if (val > limit) return limit;\n      if (val < min) return min;\n      return val;\n    }\n\n    function getValueInPercentage(value, min, max) {\n      var newMax = max - min,\n          newVal = value - min;\n      return 100 * newVal / newMax; // var absMin = Math.abs(min);\n      // return 100 * (absMin + value) / (max + absMin);\n    }\n    /**\n     * Gets cartesian co-ordinates for a specified radius and angle (in degrees)\n     * @param cx {Number} The center x co-oriinate\n     * @param cy {Number} The center y co-ordinate\n     * @param radius {Number} The radius of the circle\n     * @param angle {Number} The angle in degrees\n     * @return An object with x,y co-ordinates\n     */\n\n\n    function getCartesian(cx, cy, radius, angle) {\n      var rad = angle * Math.PI / 180;\n      return {\n        x: Math.round((cx + radius * Math.cos(rad)) * 1000) / 1000,\n        y: Math.round((cy + radius * Math.sin(rad)) * 1000) / 1000\n      };\n    } // Returns start and end points for dial\n    // i.e. starts at 135deg ends at 45deg with large arc flag\n    // REMEMBER!! angle=0 starts on X axis and then increases clockwise\n\n\n    function getDialCoords(radius, startAngle, endAngle) {\n      var cx = GaugeDefaults.centerX,\n          cy = GaugeDefaults.centerY;\n      return {\n        end: getCartesian(cx, cy, radius, endAngle),\n        start: getCartesian(cx, cy, radius, startAngle)\n      };\n    }\n    /**\n     * Creates a Gauge object. This should be called without the 'new' operator. Various options\n     * can be passed for the gauge:\n     * {\n     *    dialStartAngle: The angle to start the dial. MUST be greater than dialEndAngle. Default 135deg\n     *    dialEndAngle: The angle to end the dial. Default 45deg\n     *    dialRadius: The gauge's radius. Default 400\n     *    max: The maximum value of the gauge. Default 100\n     *    value: The starting value of the gauge. Default 0\n     *    label: The function on how to render the center label (Should return a value)\n     * }\n     * @param {Element} elem The DOM into which to render the gauge\n     * @param {Object} opts The gauge options\n     * @return a Gauge object\n     */\n\n\n    return function Gauge(elem, opts) {\n      opts = shallowCopy({}, defaultOptions, opts);\n      var gaugeContainer = elem,\n          limit = opts.max,\n          min = opts.min,\n          value = normalize(opts.value, min, limit),\n          radius = opts.dialRadius,\n          displayValue = opts.showValue,\n          startAngle = opts.dialStartAngle,\n          endAngle = opts.dialEndAngle,\n          valueDialClass = opts.valueDialClass,\n          valueTextClass = opts.valueClass,\n          valueLabelClass = opts.valueLabelClass,\n          dialClass = opts.dialClass,\n          gaugeClass = opts.gaugeClass,\n          gaugeColor = opts.color,\n          gaugeValueElem,\n          gaugeValuePath,\n          label = opts.label,\n          viewBox = opts.viewBox,\n          instance;\n\n      if (startAngle < endAngle) {\n        console.log(\"WARN! startAngle < endAngle, Swapping\");\n        var tmp = startAngle;\n        startAngle = endAngle;\n        endAngle = tmp;\n      }\n\n      function pathString(radius, startAngle, endAngle, largeArc) {\n        var coords = getDialCoords(radius, startAngle, endAngle),\n            start = coords.start,\n            end = coords.end,\n            largeArcFlag = typeof largeArc === \"undefined\" ? 1 : largeArc;\n        return [\"M\", start.x, start.y, \"A\", radius, radius, 0, largeArcFlag, 1, end.x, end.y].join(\" \");\n      }\n\n      function initializeGauge(elem) {\n        gaugeValueElem = svg(\"text\", {\n          x: 50,\n          y: 50,\n          fill: \"#999\",\n          \"class\": valueTextClass,\n          \"font-size\": \"100%\",\n          \"font-family\": \"sans-serif\",\n          \"font-weight\": \"normal\",\n          \"text-anchor\": \"middle\",\n          \"alignment-baseline\": \"middle\",\n          \"dominant-baseline\": \"central\"\n        });\n        gaugeValuePath = svg(\"path\", {\n          \"class\": valueDialClass,\n          fill: \"none\",\n          stroke: \"#666\",\n          \"stroke-width\": 2.5,\n          d: pathString(radius, startAngle, startAngle) // value of 0\n\n        });\n        var angle = getAngle(100, 360 - Math.abs(startAngle - endAngle));\n        var flag = angle <= 180 ? 0 : 1;\n        var gaugeElement = svg(\"svg\", {\n          \"viewBox\": viewBox || \"0 0 100 100\",\n          \"class\": gaugeClass\n        }, [svg(\"path\", {\n          \"class\": dialClass,\n          fill: \"none\",\n          stroke: \"#eee\",\n          \"stroke-width\": 2,\n          d: pathString(radius, startAngle, endAngle, flag)\n        }), svg(\"g\", {\n          \"class\": \"text-container\"\n        }, [gaugeValueElem]), gaugeValuePath]);\n        elem.appendChild(gaugeElement);\n      }\n\n      function updateGauge(theValue, frame) {\n        var val = getValueInPercentage(theValue, min, limit),\n            // angle = getAngle(val, 360 - Math.abs(endAngle - startAngle)),\n        angle = getAngle(val, 360 - Math.abs(startAngle - endAngle)),\n            // this is because we are using arc greater than 180deg\n        flag = angle <= 180 ? 0 : 1;\n\n        if (displayValue) {\n          gaugeValueElem.textContent = label.call(opts, theValue);\n        }\n\n        gaugeValuePath.setAttribute(\"d\", pathString(radius, startAngle, angle + startAngle, flag));\n      }\n\n      function setGaugeColor(value, duration) {\n        var c = gaugeColor.call(opts, value),\n            dur = duration * 1000,\n            pathTransition = \"stroke \" + dur + \"ms ease\"; // textTransition = \"fill \" + dur + \"ms ease\";\n\n        gaugeValuePath.style.stroke = c;\n        gaugeValuePath.style[\"-webkit-transition\"] = pathTransition;\n        gaugeValuePath.style[\"-moz-transition\"] = pathTransition;\n        gaugeValuePath.style.transition = pathTransition;\n        /*\n        gaugeValueElem.style = [\n          \"fill: \" + c,\n          \"-webkit-transition: \" + textTransition,\n          \"-moz-transition: \" + textTransition,\n          \"transition: \" + textTransition,\n        ].join(\";\");\n        */\n      }\n\n      instance = {\n        setMaxValue: function (max) {\n          limit = max;\n          updateGauge(value);\n        },\n        setValue: function (val) {\n          value = normalize(val, min, limit);\n\n          if (gaugeColor) {\n            setGaugeColor(value, 0);\n          }\n\n          updateGauge(value);\n        },\n        setValueAnimated: function (val, duration) {\n          var oldVal = value;\n          value = normalize(val, min, limit);\n\n          if (oldVal === value) {\n            return;\n          }\n\n          if (gaugeColor) {\n            setGaugeColor(value, duration);\n          }\n\n          Animation({\n            start: oldVal || 0,\n            end: value,\n            duration: duration || 1,\n            step: function (val, frame) {\n              updateGauge(val, frame);\n            }\n          });\n        },\n        getValue: function () {\n          return value;\n        }\n      };\n      initializeGauge(gaugeContainer);\n      instance.setValue(value);\n      return instance;\n    };\n  }();\n\n  return Gauge;\n});","map":{"version":3,"names":["global","factory","Gauge","define","amd","module","exports","window","undefined","document","slice","Array","prototype","requestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","msRequestAnimationFrame","cb","setTimeout","Animation","options","duration","currentIteration","iterations","start","end","change","step","easing","easeInOutCubic","pos","Math","pow","animate","progress","value","SVG_NS","GaugeDefaults","centerX","centerY","defaultOptions","dialRadius","dialStartAngle","dialEndAngle","max","min","valueDialClass","valueClass","dialClass","gaugeClass","showValue","gaugeColor","label","val","round","shallowCopy","target","arguments","sources","call","forEach","s","k","hasOwnProperty","svg","name","attrs","children","elem","createElementNS","attrName","setAttribute","c","appendChild","getAngle","percentage","gaugeSpanAngle","normalize","limit","Number","getValueInPercentage","newMax","newVal","getCartesian","cx","cy","radius","angle","rad","PI","x","cos","y","sin","getDialCoords","startAngle","endAngle","opts","gaugeContainer","displayValue","valueTextClass","valueLabelClass","color","gaugeValueElem","gaugeValuePath","viewBox","instance","console","log","tmp","pathString","largeArc","coords","largeArcFlag","join","initializeGauge","fill","stroke","d","abs","flag","gaugeElement","updateGauge","theValue","frame","textContent","setGaugeColor","dur","pathTransition","style","transition","setMaxValue","setValue","setValueAnimated","oldVal","getValue"],"sources":["C:/angular1615/RES/node_modules/svg-gauge/src/gauge.js"],"sourcesContent":["/* global window, define, module */\n(function(global, factory) {\n  var Gauge = factory(global);\n  if(typeof define === \"function\" && define.amd) {\n    // AMD support\n    define(function() {return Gauge;});\n  }else if(typeof module === \"object\" && module.exports) {\n    // CommonJS support\n    module.exports = Gauge;\n  }else {\n    // We are probably running in the browser\n    global.Gauge = Gauge;\n  }\n})(typeof window === \"undefined\" ? this : window, function(global, undefined) {\n\n  var document = global.document,\n    slice = Array.prototype.slice,\n    requestAnimationFrame = (global.requestAnimationFrame ||\n        global.mozRequestAnimationFrame ||\n        global.webkitRequestAnimationFrame ||\n        global.msRequestAnimationFrame ||\n        function(cb) {\n          return setTimeout(cb, 1000 / 60);\n        });\n\n  // EXPERIMENTAL!!\n  /**\n   * Simplistic animation function for animating the gauge. That's all!\n   * Options are:\n   * {\n   *  duration: 1,    // In seconds\n   *  start: 0,       // The start value\n   *  end: 100,       // The end value\n   *  step: function, // REQUIRED! The step function that will be passed the value and does something\n   *  easing: function // The easing function. Default is easeInOutCubic\n   * }\n   */\n  function Animation(options) {\n    var duration = options.duration,\n        currentIteration = 1,\n        iterations = 60 * duration,\n        start = options.start || 0,\n        end = options.end,\n        change = end - start,\n        step = options.step,\n        easing = options.easing || function easeInOutCubic(pos) {\n          // https://github.com/danro/easing-js/blob/master/easing.js\n          if ((pos/=0.5) < 1) return 0.5*Math.pow(pos,3);\n          return 0.5 * (Math.pow((pos-2),3) + 2);\n        };\n\n    function animate() {\n      var progress = currentIteration / iterations, \n          value = change * easing(progress) + start;\n      // console.log(progress + \", \" + value);\n      step(value, currentIteration);\n      currentIteration += 1;\n\n      if(progress < 1) {\n        requestAnimationFrame(animate);\n      }\n    }\n    // start!\n    requestAnimationFrame(animate);\n  }\n\n\n\n  var Gauge = (function() {\n    var SVG_NS = \"http://www.w3.org/2000/svg\";\n\n    var GaugeDefaults = {\n      centerX: 50,\n      centerY: 50\n    };\n\n    var defaultOptions = {\n      dialRadius: 40,\n      dialStartAngle: 135,\n      dialEndAngle: 45,\n      value: 0,\n      max: 100,\n      min: 0,\n      valueDialClass: \"value\",\n      valueClass: \"value-text\",\n      dialClass: \"dial\",\n      gaugeClass: \"gauge\",\n      showValue: true,\n      gaugeColor: null,\n      label: function(val) {return Math.round(val);}\n    };\n\n    function shallowCopy(/* source, ...targets*/) {\n      var target = arguments[0], sources = slice.call(arguments, 1);\n      sources.forEach(function(s) {\n        for(var k in s) {\n          if(s.hasOwnProperty(k)) {\n            target[k] = s[k];\n          }\n        }\n      });\n      return target;\n    }\n\n    /**\n     * A utility function to create SVG dom tree\n     * @param {String} name The SVG element name\n     * @param {Object} attrs The attributes as they appear in DOM e.g. stroke-width and not strokeWidth\n     * @param {Array} children An array of children (can be created by this same function)\n     * @return The SVG element\n     */\n    function svg(name, attrs, children) {\n      var elem = document.createElementNS(SVG_NS, name);\n      for(var attrName in attrs) {\n        elem.setAttribute(attrName, attrs[attrName]);\n      }\n\n      if(children) {\n        children.forEach(function(c) {\n          elem.appendChild(c);\n        });\n      }\n      return elem;\n    }\n\n    /**\n     * Translates percentage value to angle. e.g. If gauge span angle is 180deg, then 50%\n     * will be 90deg\n     */\n    function getAngle(percentage, gaugeSpanAngle) {\n      return percentage * gaugeSpanAngle / 100;\n    }\n\n    function normalize(value, min, limit) {\n      var val = Number(value);\n      if(val > limit) return limit;\n      if(val < min) return min;\n      return val;\n    }\n\n    function getValueInPercentage(value, min, max) {\n      var newMax = max - min, newVal = value - min;\n      return 100 * newVal / newMax;\n      // var absMin = Math.abs(min);\n      // return 100 * (absMin + value) / (max + absMin);\n    }\n\n    /**\n     * Gets cartesian co-ordinates for a specified radius and angle (in degrees)\n     * @param cx {Number} The center x co-oriinate\n     * @param cy {Number} The center y co-ordinate\n     * @param radius {Number} The radius of the circle\n     * @param angle {Number} The angle in degrees\n     * @return An object with x,y co-ordinates\n     */\n    function getCartesian(cx, cy, radius, angle) {\n      var rad = angle * Math.PI / 180;\n      return {\n        x: Math.round((cx + radius * Math.cos(rad)) * 1000) / 1000,\n        y: Math.round((cy + radius * Math.sin(rad)) * 1000) / 1000\n      };\n    }\n\n    // Returns start and end points for dial\n    // i.e. starts at 135deg ends at 45deg with large arc flag\n    // REMEMBER!! angle=0 starts on X axis and then increases clockwise\n    function getDialCoords(radius, startAngle, endAngle) {\n      var cx = GaugeDefaults.centerX,\n          cy = GaugeDefaults.centerY;\n      return {\n        end: getCartesian(cx, cy, radius, endAngle),\n      \tstart: getCartesian(cx, cy, radius, startAngle)\n      };\n    }\n\n    /**\n     * Creates a Gauge object. This should be called without the 'new' operator. Various options\n     * can be passed for the gauge:\n     * {\n     *    dialStartAngle: The angle to start the dial. MUST be greater than dialEndAngle. Default 135deg\n     *    dialEndAngle: The angle to end the dial. Default 45deg\n     *    dialRadius: The gauge's radius. Default 400\n     *    max: The maximum value of the gauge. Default 100\n     *    value: The starting value of the gauge. Default 0\n     *    label: The function on how to render the center label (Should return a value)\n     * }\n     * @param {Element} elem The DOM into which to render the gauge\n     * @param {Object} opts The gauge options\n     * @return a Gauge object\n     */\n    return function Gauge(elem, opts) {\n      opts = shallowCopy({}, defaultOptions, opts);\n      var gaugeContainer = elem,\n          limit = opts.max,\n          min = opts.min,\n          value = normalize(opts.value, min, limit),\n          radius = opts.dialRadius,\n          displayValue = opts.showValue,\n          startAngle = opts.dialStartAngle,\n          endAngle = opts.dialEndAngle,\n          valueDialClass = opts.valueDialClass,\n          valueTextClass = opts.valueClass,\n          valueLabelClass = opts.valueLabelClass,\n          dialClass = opts.dialClass,\n          gaugeClass = opts.gaugeClass,\n          gaugeColor = opts.color,\n          gaugeValueElem,\n          gaugeValuePath,\n          label = opts.label,\n          viewBox = opts.viewBox,\n          instance;\n\n      if(startAngle < endAngle) {\n        console.log(\"WARN! startAngle < endAngle, Swapping\");\n        var tmp = startAngle;\n        startAngle = endAngle;\n        endAngle = tmp;\n      }\n\n      function pathString(radius, startAngle, endAngle, largeArc) {\n        var coords = getDialCoords(radius, startAngle, endAngle),\n            start = coords.start,\n            end = coords.end,\n            largeArcFlag = typeof(largeArc) === \"undefined\" ? 1 : largeArc;\n\n        return [\n          \"M\", start.x, start.y, \n          \"A\", radius, radius, 0, largeArcFlag, 1, end.x, end.y\n        ].join(\" \");\n      }\n\n      function initializeGauge(elem) {\n        gaugeValueElem = svg(\"text\", {\n          x: 50,\n          y: 50,\n          fill: \"#999\",\n          \"class\": valueTextClass,\n          \"font-size\": \"100%\",\n          \"font-family\": \"sans-serif\",\n          \"font-weight\": \"normal\",\n          \"text-anchor\": \"middle\",\n          \"alignment-baseline\": \"middle\",\n          \"dominant-baseline\": \"central\"\n        });\n\n        gaugeValuePath = svg(\"path\", {\n          \"class\": valueDialClass,\n          fill: \"none\",\n          stroke: \"#666\",\n          \"stroke-width\": 2.5,\n          d: pathString(radius, startAngle, startAngle) // value of 0\n        });\n\n        var angle = getAngle(100, 360 - Math.abs(startAngle - endAngle));\n        var flag = angle <= 180 ? 0 : 1;\n        var gaugeElement = svg(\"svg\", {\"viewBox\": viewBox || \"0 0 100 100\", \"class\": gaugeClass}, [\n          svg(\"path\", {\n            \"class\": dialClass,\n            fill: \"none\",\n            stroke: \"#eee\",\n            \"stroke-width\": 2,\n            d: pathString(radius, startAngle, endAngle, flag)\n          }),\n          svg(\"g\", { \"class\": \"text-container\" }, [gaugeValueElem]),\n          gaugeValuePath\n        ]);\n        elem.appendChild(gaugeElement);\n      }\n\n      function updateGauge(theValue, frame) {\n        var val = getValueInPercentage(theValue, min, limit),\n            // angle = getAngle(val, 360 - Math.abs(endAngle - startAngle)),\n            angle = getAngle(val, 360 - Math.abs(startAngle - endAngle)),\n            // this is because we are using arc greater than 180deg\n            flag = angle <= 180 ? 0 : 1;\n        if(displayValue) {\n          gaugeValueElem.textContent = label.call(opts, theValue);\n        }\n        gaugeValuePath.setAttribute(\"d\", pathString(radius, startAngle, angle + startAngle, flag));\n      }\n\n      function setGaugeColor(value, duration) {        \n        var c = gaugeColor.call(opts, value), \n            dur = duration * 1000,\n            pathTransition = \"stroke \" + dur + \"ms ease\";\n            // textTransition = \"fill \" + dur + \"ms ease\";\n\n        gaugeValuePath.style.stroke = c;\n        gaugeValuePath.style[\"-webkit-transition\"] = pathTransition;\n        gaugeValuePath.style[\"-moz-transition\"] = pathTransition;\n        gaugeValuePath.style.transition = pathTransition;\n        /*\n        gaugeValueElem.style = [\n          \"fill: \" + c,\n          \"-webkit-transition: \" + textTransition,\n          \"-moz-transition: \" + textTransition,\n          \"transition: \" + textTransition,\n        ].join(\";\");\n        */\n      }\n\n      instance = {\n        setMaxValue: function(max) {\n          limit = max;\n          updateGauge(value);\n        },\n        setValue: function(val) {\n          value = normalize(val, min, limit);\n          if(gaugeColor) {\n            setGaugeColor(value, 0)\n          }\n          updateGauge(value);\n        },\n        setValueAnimated: function(val, duration) {\n        \tvar oldVal = value;\n          value = normalize(val, min, limit);\n          if(oldVal === value) {\n            return;\n          }\n\n          if(gaugeColor) {\n            setGaugeColor(value, duration);\n          }\n          Animation({\n            start: oldVal || 0,\n            end: value,\n            duration: duration || 1,\n            step: function(val, frame) {\n              updateGauge(val, frame);\n            }\n          });\n        },\n        getValue: function() {\n          return value;\n        }\n      };\n\n      initializeGauge(gaugeContainer);\n      instance.setValue(value);\n      return instance;\n    };\n  })();\n\n  return Gauge;\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}